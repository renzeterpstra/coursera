---
title: "Week 1 notes"
author: "Renze Terpstra"
date: "4-4-2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# R programming week 1 - notes
These are my personal notes for week 1 of the R programming course. 

# What is R?
R is a dialect of the S programming language. The S language was created in 1976 as a statistical analysis environment. The philosophy behind S was to enable and promote the transition from a user to a developer. R is based on S, and runs on any standard OS. It's lean, good at creating graphics, useful for programming, and has an active user community.  
R is free software, meaning it's:  

- free to run;
- free to study & adapt how it works;
- free to redistribute;
- free to improve upon + release;  

# R console input
the operator `<-` is the assignment operator. It is used to assign a value to an expression. For example:
```{r echo=TRUE}
x <- 5
x
```
This assigns the value `5` to the expression `x`. When later you call the expression `x`, the program wil provide the value `5` that was assigned to it.  

## R data types
R has several atomic classes of objects. The atomic classes of objects are:

- character
- Numeric
- Integer
- Complex
- Logical

In the R documentation these are called atomic modes.  Objects consist of one or several of thse modes. The most basic object is the vector. A vector contains multiples of the same class. You create an empty vector with `vector(CLASS, LENGTH)`.  

### Numbers
In R, numbers are by default treated as numeric; to treat a number as an integer, use the L suffix.  

## Attributes
Atributes are part of an object. They are:  

- Name
- Dimensions (used for a matrix or array)
- Class
- Length
- User-defined attributes

use `attributes()` to set or modify attributes.  

### creating vectors
With `x <- c(0.5, 0.6)` you create a numeric vector with a length of two. The first value is 0.5, the second value is 0.6.

If you create a vector with mixed classes of objects, R coerces the vector into the lowest common denominator of the contained objects. The exception to this is when creating lists, these can contain multiple classes.

### Creating matrices
Matrices are vectors with a dimension attribute. For example: `x <- matrix(nrow=2, ncol=3)` creates an empty matrix 'x' consisting of 2 rows, and 3 columns. Additionally:
```{r echo=TRUE}
x <- matrix(1:6, nrow=2, ncol=3)
```
This creates a matrix 'x' consisting of 2 rows, and 3 columns, and containing the values 1 through 6.

To create a matrix from vectors, you can use the `cbind()` and `rbind()` commands. For example:
```{r echo=TRUE}
x <- c(1:4)
y <- c(6:9)
cbind(x, y)
```
This creates a matrix from the vectors `x` and `y`. Because the `cbind()` command was used, the first vector (`x` in this case) is assigned to the first column, and the second to the second column.

### Factors
Factors are used to store categorical data. Factors are an integer, where each integer has a label. To create a factors use `x <- factor(c(values))`. To strip down the class labels, use  `unclass(x)`. THis shows the underlying values. 
The default behavior is to assign values to the classes in alpahbetical order. To set levels manually, use `levels-("value1", "value2")`. In this case value1 is assigned the base value.

## Missing values
R assigns two types of missing values
* NaN = an undefined mathematical operation
* NA = any other type of missing value
To test for missing values use `is.na()` or `is.nan()`. Keep in mind that NaN is a subtype of NA.

## Data frames
Data frames store tabular data. The are lists, where each element must have the same length, but elements can have different types.Create data frames using `read.table()` or `read.csv()`. You can use `data.matrix()` to convert a data frame to a matrix (coercive). To assign names, use `names("element", "names", "here")`.

### Reading tabular data
`read.table()` or `read.csv()` are used to read tabular data.`read.lines()` is used to read lines of a text file. `source()` reads in R code files.

The `read.table()` arguments are:  

- file: name of a file, or a connection
- header: logical, indicates if the first line is a header line.
- sep: indicates how files are separated (e.g. by a comma, space or semicolon)
- colclasses: indicates column class in the dataset
- nrows: the number of rows in the dataset
- comment.char: indicates the comment character. By default this is `#`.
- skip: indicates the number of lines from the top to be skipped.
- StringsAsFactors: logical, indicates if character variables should be read as factors.

### Writing textual data
`dump()` and `dput()` can be used to save something as textual data. Text formats preserve metadata and are editable, but require more space. The `dput()` command takes an object and creates code to reconstruct it in R. For example `dput(y, file=y.R)` dputs the content of object "y" and saves it to the file "y.R". Use `dget()` to read the file in R.

## Subsetting objects
There are three operators that extract subsets of R objects:
* `[` always returns an object of the same class as the original; it can select more than 1 element.
* `[[` extracts an element of a list or dataframe; the class may be different.
* `$` etracts elements of a list or dataset that have names.

### Subsetting lists
For extracting multiple elements from a list, you can only use `[`. `[[` can be used for computed names, `$` cannot.

### Subsetting matrices
When subsetting matrices, indices can be missing. E.g. you can use `[1, ]` or `[ ,3]`. Using `drop=FALSE` ensures that subsetting returns a matrix. The default behavior is to return a vector.

## Subsetting - removing missing values
You can use the following code to remove missing values:
```{r echo=TRUE}
#this vector has two missing values
x <- c(1, 2, NA, 4, NA, 5)
#create a logical vector 'missing'
missing <- is.na(x)
#print x without missing values
x[!missing]
```

Another option:
```{r echo=TRUE}
#two vectors with missing values
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
#create logical vector 'complete
complete <- complete.cases(x,y)
#take subset of complete cases
x[complete]
```

## Vectorized operations
In R, if you perform an operation on a vector, it will perform this operation on each element in that vector. For example
```{r echo=TRUE}
x <- 1:4; y <- 6:9
x+y
```
The operator will perform 1+6, 2+7, etc.
